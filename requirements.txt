# sentinel_project_root/requirements.txt
# Python package dependencies for Sentinel Health Co-Pilot

# Core Streamlit and Data Handling
streamlit>=1.38.0 # Or latest stable version
pandas>=2.0.0,<2.2.0 # Specify a compatible range
numpy>=1.23.0,<1.27.0

# Plotting and Visualization
plotly>=5.10.0,<5.21.0

# Geospatial - Lightweight Alternatives (if basic geometry handling or CRS is still needed)
# shapely>=2.0.0 # For working with geometry objects (often a dependency of GeoPandas, but can be used standalone)
# pyproj>=3.4.0  # For coordinate reference system transformations (if needed)
# geojson>=3.0.0 # For parsing and handling GeoJSON files/objects directly

# NOTE: GeoPandas and its direct heavy dependencies like Fiona and RTree have been REMOVED
# as per the refactoring requirements.
# Ensure no 'geopandas' entry is present here.

# Database (Example if PostgreSQL is used, as hinted in original app_config.py)
# psycopg2-binary>=2.9.0 # Uncomment and adjust version if PostgreSQL is indeed used

# Other potential utilities (add as needed)
# python-dotenv>=1.0.0    # For loading .env files if used for configuration
# requests>=2.28.0        # For making HTTP requests (e.g., to FHIR server or other APIs)
# openpyxl>=3.1.0         # If reading/writing Excel files is a feature

# --- Notes for this refactored requirements.txt ---
# 1. VERSIONS: It is highly recommended to pin package versions for reproducible environments,
#    especially for production. Example: `pandas==2.1.4`.
#    You can generate a fully pinned list from a working virtual environment using:
#    `pip freeze > requirements.txt`
#    For this refactoring, broad ranges are used, but pinning is best practice.

# 2. GEOSPATIAL LIBRARIES:
#    - `geopandas` has been explicitly removed.
#    - If your refactored code still needs to perform some geometric operations
#      (e.g., basic point-in-polygon, distance calculations without full GIS capability)
#      or handle Coordinate Reference Systems (CRS), you might consider lightweight
#      libraries like `shapely` and `pyproj` respectively.
#    - `geojson` can be useful for directly parsing/manipulating GeoJSON files/objects
#      if the `json` standard library is not sufficient for your needs with GeoJSON.
#    - These lightweight libraries might still have system-level C dependencies (e.g., GEOS for Shapely,
#      PROJ for Pyproj). Ensure these are listed in `packages.txt` if the Python packages are included here.

# 3. SYSTEM DEPENDENCIES:
#    - Some Python packages (especially those with C extensions like older numpy/pandas or some geo libs)
#      require system-level libraries to be installed first.
#    - Refer to `packages.txt` for a list of common system dependencies (APT package names for Debian/Ubuntu).
#    - Always consult the documentation for individual Python packages if `pip install` fails due to
#      missing system libraries.

# 4. REVIEW AND PRUNE:
#    - After refactoring, review this `requirements.txt` carefully.
#    - Remove any packages that are no longer used by the application to keep the environment lean.
#    - Add any new packages that were introduced during the refactoring.
