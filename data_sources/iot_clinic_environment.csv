timestamp,clinic_id,chw_id,room_name,sensor_id,avg_co2_ppm,max_co2_ppm,avg_pm25,avg_temp_celsius,avg_humidity_rh,avg_noise_db,waiting_room_occupancy,chw_stress_score,zone_id
2023-11-20T09:05:00Z,ClinicA,,Waiting Room,Sensor_WR_A,850,950,15.2,24.5,60,65,8,,Zone-A
2023-11-20T10:00:00Z,,CHW001,,,NA,NA,NA,28.1,75,NA,NA,22,Zone-A
2023-11-20T11:30:00Z,,CHW002,,,NA,NA,NA,30.5,80,NA,NA,35,Zone-B
2023-11-20T14:00:00Z,,CHW002,,,NA,NA,NA,31.2,82,NA,NA,41,Zone-B
2023-11-20T08full_history_df, forecast_days)
        if not forecasts:
            st.warning("Not enough historical data in the selected zone to generate reliable forecasts.")
        else:
            fc_type = st.selectbox("Select Forecast:", options=list(forecasts.keys()))
            y_axis = "Daily Encounters" if fc_type == "Patient Load" else "Avg. Community Risk"
            fig = plot_forecast_chart(forecasts[fc_type], title=f"{fc_type} Forecast", y_title=y_axis)
            st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.subheader("Environmental & Wearable Factors")
        iot_filtered = iot_df[iot_df['timestamp'].dt.date.between(start_date, end_date)]
        if selected_zone != "All Zones" and not iot_filtered.empty:
            iot_filtered = iot_filtered[iot_filtered['zone_id'] == selected_zone]
        
        if iot_filtered.empty:
            st.info("No IoT or wearable data available for this period.")
        else:
            st.info("This section visualizes real-time data from clinic sensors (e.g., CO2 for ventilation) and CHW wearables (e.g., stress/fatigue index) to identify environmental risks that may impact community or worker health.")


if __name__ == "__main__":
